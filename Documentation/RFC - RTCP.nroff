.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.ds LF Epitech 
.ds RF FORMFEED[Page %]
.ds LH RFC 12345
.ds RH December 14, 2012
.ds CH Babel Communication Protocol 
.ds CF Expires May 20, 2013
.hy 0
.nh
.ad l
.in 0

.nf
.tl 'RFC 4242''Quentin LEFFRAY, Nicolas MAGERE'
.tl 'Intended Status: Experimental''Epitech'
.tl 'Expires: May 20, 2013''December 14, 2012'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 3
RTCP: A Communication Protocol For R-Type Project
.fi
.in 3


.ti 0
Abstract

This memorandum describes RTCP, the communication protocol for a project from Epitech's school : R-Type.

This protocol is used for designing a "Shoot Them Up" game, based on server-client (in both ways) relation.

The server's aim is to interpret all incoming requests from clients to manage at both several games and all connections.

Client for its is to contact the server on the one hand to give his EP (End Point) to connect to it, and on the other hand to send regularly datas to continue the game.
The following document describes server-client interactions.

.ti 0
Status of this Memo

This Internet-Draft is submitted to IETF in full conformance with the provisions of BCP\078 and BCP\079.

Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups.  Note that other groups may also distribute working documents as \%Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time.  It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at \%http://www.ietf.org/1id-abstracts.html

The list of Internet-Draft Shadow Directories can be accessed at http://www.ietf.org/shadow.html


.ti 0
Copyright and License Notice\" Boilerplate from December 2009

.\" NOTE: Insert current <year> in the following paragraph
Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.
.bp

.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  5
     1.1  Terminology . . . . . . . . . . . . . . . . . . . . . . . .  5
   2. Terms definition  . . . . . . . . . . . . . . . . . . . . . . .  5
   3. Concept of RTCP protocol  . . . . . . . . . . . . . . . . . . .  5
     3.1 Communication between client and server  . . . . . . . . . .  5
   4. Standard packet format for data transfer  . . . . . . . . . . .  6
     4.1 UDP packet format  . . . . . . . . . . . . . . . . . . . . .  6
       4.1.1 Scheme of an UDP packet  . . . . . . . . . . . . . . . .  6
       4.1.2 Structure of an UDP packet . . . . . . . . . . . . . . .  6
     4.2 TCP packet format  . . . . . . . . . . . . . . . . . . . . .  7
       4.2.1 Scheme of a TCP packet . . . . . . . . . . . . . . . . .  7
       4.2.2 Structure of a TCP packet  . . . . . . . . . . . . . . .  7
   5. errors identifiers  . . . . . . . . . . . . . . . . . . . . . .  7
     5.1 1xx : success  . . . . . . . . . . . . . . . . . . . . . . .  7
     5.2 2xx : client error . . . . . . . . . . . . . . . . . . . . .  7
     5.3 3xx : server error . . . . . . . . . . . . . . . . . . . . .  7
     5.4 4xx : global error . . . . . . . . . . . . . . . . . . . . .  8
   6.  Commands . . . . . . . . . . . . . . . . . . . . . . . . . . .  8
     6.1 Communication between several clients  . . . . . . . . . . .  8
       6.1.1 Testing connection between clients . . . . . . . . . . .  8
       6.1.2 Set the quality of the transmission  . . . . . . . . . .  8
       6.1.3 Notify a client disconnection  . . . . . . . . . . . . .  8
       6.1.4 Send data by type  . . . . . . . . . . . . . . . . . . .  9
         6.1.4.1 Send voice data  . . . . . . . . . . . . . . . . . .  9
         6.1.4.2 Send video data  . . . . . . . . . . . . . . . . . .  9
         6.1.4.3 Send text data . . . . . . . . . . . . . . . . . . .  9
         6.1.4.4 Send file  . . . . . . . . . . . . . . . . . . . . .  9
         6.1.4.5 Send unspecified data  . . . . . . . . . . . . . . .  9
     6.2 Commands from a client to a server . . . . . . . . . . . . . 10
       6.2.1 GLOBAL_REGISTER  . . . . . . . . . . . . . . . . . . . . 10
       6.2.2 GLOBAL_LOG . . . . . . . . . . . . . . . . . . . . . . . 10
       6.2.3 GLOBAL_LOGOUT  . . . . . . . . . . . . . . . . . . . . . 10
       6.2.4 CLIENT_INVITE  . . . . . . . . . . . . . . . . . . . . . 10
       6.2.5 CLIENT_ACCEPT  . . . . . . . . . . . . . . . . . . . . . 11
       6.2.6 CLIENT_SHARED  . . . . . . . . . . . . . . . . . . . . . 11
       6.2.7 CONTACT_WATCH  . . . . . . . . . . . . . . . . . . . . . 11
     6.3 Commands from a server to a client . . . . . . . . . . . . . 11
       6.3.1 GLOBAL_NOTIFY  . . . . . . . . . . . . . . . . . . . . . 11
       6.3.2 CLIENT_INCOMING  . . . . . . . . . . . . . . . . . . . . 12
       6.3.3 CLIENT_ALLOW . . . . . . . . . . . . . . . . . . . . . . 12
       6.3.4 CLIENT_SUMMON  . . . . . . . . . . . . . . . . . . . . . 13
   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 13
     7.1  Normative References  . . . . . . . . . . . . . . . . . . . 13
     7.2  Informative References  . . . . . . . . . . . . . . . . . . 13
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 13
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1.  Introduction

As said before, the RTCP (R-Type Communication Protocol) protocol has been designed for creating a "Shoot Them Up" game, based on server-client (in both ways) relation.

The RTCP has been developed on systems using the TCP and UDP network protocol.

The TCP network is used when a client launches a game : every important data, (such as map, textures, etc) will be transmitted on this way, to avoid data perdition.

The UDP protocol is used for all in-game transmitted datas (like each client coordinates).

.ti 0
1.1  Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [RFC2119].


.ti 0
2. Terms definition

- Endpoint : define a couple of service, ip address and port.


.ti 0
3. Concept of RTCP protocol

The RTCP protocol is a binary one, based on one main interaction : client-server (in both ways).

.ti 0
3.1 Communication between client and server

This part has been developed to manage exchanges between servers and clients, it's based on TCP and UDP network protocols.
.fi
As said before, the server is the central point of every client which connects to.

The TCP network is used when a client is not playing the game (is in a waiting room, creating one), or is just launching it : every important data, (such as map, textures, etc) will be transmitted as this, to avoid data perdition.
.fi
The UDP protocol is used for all others transmitted datas (like each client coordinates).


Let's see the implementation of the client-server communication (TCP level).
.fi
Notice that each command's description is available below (see part 6-Commands).

.ti 8
*from Client to Server

First, each client has to CONNECT to the server.
.fi
After that, it can CREATE_ROOM, LEAVE_ROOM, JOIN_ROOM, INVITE_PLAYER, be INVITED, SET_GAME_PARAM, PING, and LAUNCH_GAME.
.fi


.ti 8
*from Server to Client

When a client emits a CONNECT, the server responds to it with ACK_CREATE_ROOM.
The server can also transfer information to client through BEGIN_STREAM, STREAM, END_STREAM commands.


.ti 0	
4. Standard packet format for data transfer

.ti 0
4.1 UDP packet format

The UDP protocol is used for communication between client and server.

.ti 0
4.1.1 Scheme of an UDP packet

+---------------+--------------------------+
.fi
| Len = 16 bits | Player's token = 16 bits |
.fi
+---------------+--------------------------+
.fi
|      Input/Output Type = 32 bits         |
.fi
+------------------------------------------+
.fi
|      Game's clock = 32 bits              |
.fi
+------------------------------------------+
.fi
|      Value of Input/Output = n bits      |
.fi
+------------------------------------------+

.ti 0
4.1.2 Structure of an UDP packet

Remember that UDP is used for in-game packet transfer.
An UDP packet is structured with 5 different fields :

.fi
- The first one ("Len") represents the total length of the packet.
.fi
- The second one ("Player's token") is an identifying number which differs for each client, in order to distinguish any of them.
.fi
- The third one ("Input / Output Type") represents the type of the packet, sent for INPUT (client to server transmission), or OUTPUT (server to client transmission).
.fi
- The fourth one ("Game's clock") contains the game's time of the packet before being sent.
.fi
- The last field ("Value of Input/Output") represents the data itself in the case of data transfer.

.ti 0
4.2 TCP packet format

The TCP protocol is used for communication server-client and server-server.

.ti 0
4.2.1 Scheme of a TCP packet

+---------------+--------------------------+
.fi
| Len = 16 bits |      Type = 16 bits      |
.fi
+---------------+--------------------------+
.fi
|            Data = n bits                 |
.fi
+------------------------------------------+

.ti 0
4.2.2 Structure of a TCP packet

Remember that TCP is used for all non in-game packet transfer.
A TCP packet is structured with 3 different field :
.fi

- The first one ("Len") represents the total length of the packet.
.fi
- The second one ("Type") contains the request or the command type.
.fi
- The last field ("Data") represents the arguments.


.ti 0
5. errors identifiers

.ti 0
5.1 1xx : success

- 101 : success

.ti 0
5.2 2xx : client error

- 201 : user refused
.fi
- 202 : user did not respond
.fi
- 203 : client failed to connect
.fi
- 204 : client understands request but refused to process it

.ti 0
5.3 3xx : server error

- 301 : server failed to transfer request
.fi
- 302 : server failed to process request
.fi
- 303 : server refused this command
.fi
- 304 : server understands request but refusedk to process it
.fi
- 305 : insufficient privileges
.fi
- 306 : transferred user not found

.ti 0
5.4 4xx : global error

- 401 : invalid request
.fi
- 402 : incomplete request
.fi
- 403 : forbidden request
.fi
- 404 : request not found


.ti 0
6.  Commands

.ti 0
6.1 Communication between several clients

The client-client communication are made through some commands inside the CALL section.

.ti 0
6.1.1 Testing connection between clients

Commands :
.fi
CALL_PING = 1101
.fi
CALL_PONG = 1102

Description :
.fi
Those commands MUST be used to test the connection between two clients. The first one send a CALL_PING as the frame request. The client target will answer with a CALL_PONG if he had successfully receive the CALL_PING.  

.ti 0
6.1.2 Set the quality of the transmission

Commands :
.fi
CALL_INCREASE_QUALITY = 1103
.fi
CALL_DECREASE_QUALITY = 1104

Description :
.fi
Those commands MAY be used to set the quality of the transmission from another client. They can be useful to adapt the quality of the transmission based on the latency.

.ti 0
6.1.3 Notify a client disconnection

Command :
.fi
CALL_DISCONNECTION = 1105

Description :
This command SHOULD be used as the frame request to notify the disconnection to others clients.

.ti 0
6.1.4 Send data by type

The following request can be used to transfer data to another client.

.ti 0	
6.1.4.1 Send voice data

Command :
.fi
CALL_VOICE_PACKET = 1106

Description :
.fi
This command MUST be used as the frame request to send voice data. The data MUST be stored in the data section of the frame.

.ti 0
6.1.4.2 Send video data

Command :
.fi
CALL_VIDEO_PACKET = 1107

Description :
.fi
This command MAY be used as the frame request to send video data. The data MUST be stored in the data section of the frame.

.ti 0
6.1.4.3 Send text data

Command :
.fi
CALL_TEXT_PACKET = 1108

Description :
.fi
This command MAY be used as the frame request to send text data. The data MUST be stored in the data section of the frame.

.ti 0
6.1.4.4 Send file

Command :
.fi
CALL_FILE_PACKET = 1109

Description :
.fi
This command MAY be used as the frame request to send file data. The data MUST be stored in the data section of the frame.

.ti 0
6.1.4.5 Send unspecified data

Command :
.fi
CALL_UNSPECIFIED_PACKET = 1110

Description :
.fi
This command MAY be used as the frame request to send unspecified data. The data MUST be stored in the data section of the frame.

.ti 0
6.2 Commands from a client to a server

.ti 0
6.2.1 GLOBAL_REGISTER
	
Command :
.fi
GLOBAL_REGISTER = 1201

Parameters : <username>:<hash>
	
Description :
.fi
This command allow users to register on the network. It is used for the creation of 'user account' on that network.

The parameters are the following:
.fi
- Username : name of the user
.fi
- Hash : A md5 hash compose as <username>'/'<password>

.ti 0
6.2.2 GLOBAL_LOG

Command :
.fi
GLOBAL_LOG = 1202

Parameters : <hash>

Description :
.fi
This command inform the servers' network that the user is 'online'. After a successful log, the user is allow to send or receive calls.
The parameter hash is the same as for GLOBAL_REGISTER.

.ti 0
6.2.3 GLOBAL_LOGOUT

Command :
.fi
GLOBAL_LOGOUT = 1203

Description:
.fi
This command inform the servers' network the user is offline. After logout, the user MUST NOT receive or send calls.

.ti 0
6.2.4 CLIENT_INVITE

Command :
.fi
CLIENT_INVITE = 1301

Parameters : <endpoint>:<target>

Description :
.fi
This command initiate a dialog between to clients. 

The parameters are the following:
.fi
- endpoint : it is the network endpoint the sender will use to communicate with the target.
.fi
- target : a URI referring to a contact of the user.

.ti 0
6.2.5 CLIENT_ACCEPT

Command :
.fi
CLIENT_ACCEPT = 1302

Parameters : <endpoint>:<target>:<response Yes = 1 | No = 0>

Description:
.fi
This command is used, after receiving a CLIENT_INVITE, to accept the call or not.
The parameters are the following:
.fi
- from : it is the user who sent the request.
.fi
- endpoint : it is the network endpoint the sender will use to communicate with the target.
.fi
- response : user's response to the call.

.ti 0
6.2.6 CLIENT_SHARED

Command :
.fi
CLIENT_SHARED = 1303

Parameters : <user_1>:<user_2>

Description:
.fi
This command is use by a user who has successfully invite another contact in a progressing call.It informs user_1 that user_2 is include in that call.

Both parameters are URI referring to clients as describe above.

.ti 0
6.2.7 CONTACT_WATCH

Command :
.fi
CONTACT_WATCH = 1401

Parameters : <user>

Description:
.fi
This command is used to inform the server the client want notifications on status' changing about the user.

.ti 0
6.3 Commands from a server to a client

.ti 0
6.3.1 GLOBAL_NOTIFY

Command :
.fi
GLOBAL_NOTIFY = 1204

Parameters: <user>:<state>

Description:
.fi
This command is used to notify the client that the user has changed his status.
.fi

The status MUST be one of the following:
.fi
- CONNECTED	(0)
.fi
- DISCONNECTED	(1)
.fi

The status MAY be:
.fi
- BUSY		(2)
.fi
- AWAY		(3)
.fi
- LOCK		(4)


.ti 0
6.3.2 CLIENT_INCOMING

Command :
.fi
CLIENT_INCOMING = 1304

Parameters: <user>:<ep1>:<ep2>:<ep3>:<ep4>:<ep5>

Description:
.fi
This command is used to inform a client that another client is attempting a connection on him.
.fi
The parameters are:
.fi
- user :
.fi
	the user attempting a connection
.fi
- ep1 :
.fi
	the network endpoint the caller will use to stream audio data.
.fi
- ep2 :
.fi
	the network endpoint the caller will use to stream video data.
.fi
- ep3 :
.fi
	the network endpoint the caller will use to stream text for chat.
.fi
- ep4 :
.fi
	the network endpoint the caller will use to transfer file.
.fi
- ep5 :
.fi
	the network endpoint the caller will use for emergency communications.

The endpoint from 2 to 5 are OPTIONAL so, if you don't use one of them, you MUST set it to 0.

.ti 0
6.3.3 CLIENT_ALLOW

Command :
.fi
CLIENT_ALLOW = 1305

Parameters: <user>:<ep1>:<ep2>:<ep3>:<ep4>:<ep5>

Description:
.fi
This command is used to inform a client that his correspondent has accepted is call. It also give the client the Endpoints his correspondent will use in same order as in CLIENT_INCOMING command (see above).

.ti 0
6.3.4 CLIENT_SUMMON

Command :
CLIENT_SUMMON = 1306

Parameters : <user>

Description:
.fi
This command is used to encourage the client to invite the specified user.
If CLIENT_SHARED is implemented, you MUST also implement CLIENT_SUMMON.

.ti 0
7.  References

.ti 0 
7.1  Normative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 2119;KEYWORDS, 1776, RFC1925;TRUTHS
.ti 3
[KEYWORDS] Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP\014, RFC\02119, March 1997.

.ti 3
[RFC1776]  Crocker, S., "The Address is the Message", RFC\01776, April 1 1995.

.ti 3
[TRUTHS]   Callon, R., "The Twelve Networking Truths", RFC\01925, April 1 1996.

.\" \# ERF -- End of managed reference list
.\" ----------------------------------------
.\" The reference list can be changed at any time by altering the RFC list in the line below the .\" \# REF directive
.\" In order to execute any change, click on the 'Update All' button or select "Update 'Table of Contents' and References"
.\" from the "Edit" menu or press <F3>.
.\" NOTE: Managed reference list requires NroffEdit version 1.40 or later.

.ti 0
7.2  Informative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 3514;EVILBIT, 5513, 5514
.ti 3
[EVILBIT]  Bellovin, S., "The Security Flag in the IPv4 Header", RFC\03514, April 1 2003.

.ti 3
[RFC5513]  Farrel, A., "IANA Considerations for Three Letter Acronyms", RFC\05513, April 1 2009.

.ti 3
[RFC5514]  Vyncke, E., "IPv6 over Social Networks", RFC\05514, April 1 2009.

.\" \# ERF -- End of managed reference list
.in 3


.ti 0
Authors' Addresses

.sp
.nf
Benjamin BUSINARO - busina_b
Pierre MARTIN - mart_i
Quentin LEFFRAY - leffra_q

Epitech students

EMail: busina_b@epitech.eu
       mart_i@epitech.eu
       leffra_q@epitech.eu
.sp
.fi

