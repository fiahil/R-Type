.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.ds LF Epitech 
.ds RF FORMFEED[Page %]
.ds LH RFC 12345
.ds RH December 14, 2012
.ds CH Babel Communication Protocol 
.ds CF Expires May 20, 2013
.hy 0
.nh
.ad l
.in 0

.nf
.tl 'RFC 4242''Nicolas MAGERE, Quentin LEFFRAY'
.tl 'Intended Status: Experimental''Epitech'
.tl 'Expires: May 20, 2013''December 14, 2012'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 3
RTCP: A Communication Protocol For R-Type Project
.fi
.in 3


.ti 0
Abstract

This memorandum describes RTCP, the communication protocol for a project from Epitech's school : R-Type.

This protocol is used for designing a "Shoot Them Up" game, based on server-client (in both ways) relation.

The server's aim is to interpret all incoming requests from clients to manage at both several games and all connections.

Client for its is to contact the server on the one hand to give his EP (End Point) to connect to it, and on the other hand to send regularly datas to continue the game.
The following document describes server-client interactions.

.ti 0
Status of this Memo

This Internet-Draft is submitted to IETF in full conformance with the provisions of BCP\078 and BCP\079.

Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups.  Note that other groups may also distribute working documents as \%Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time.  It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at \%http://www.ietf.org/1id-abstracts.html

The list of Internet-Draft Shadow Directories can be accessed at http://www.ietf.org/shadow.html


.ti 0
Copyright and License Notice\" Boilerplate from December 2009

.\" NOTE: Insert current <year> in the following paragraph
Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.
.bp

.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1  Terminology . . . . . . . . . . . . . . . . . . . . . . . .  4
   2. Terms definition  . . . . . . . . . . . . . . . . . . . . . . .  4
   3. Concept of RTCP protocol  . . . . . . . . . . . . . . . . . . .  4
     3.1 Communication between client and server  . . . . . . . . . .  4
   4. Standard packet format for data transfer  . . . . . . . . . . .  5
     4.1 UDP packet format  . . . . . . . . . . . . . . . . . . . . .  5
       4.1.1 Scheme of an UDP packet  . . . . . . . . . . . . . . . .  5
       4.1.2 Structure of an UDP packet . . . . . . . . . . . . . . .  5
     4.2 TCP packet format  . . . . . . . . . . . . . . . . . . . . .  6
       4.2.1 Scheme of a TCP packet . . . . . . . . . . . . . . . . .  6
       4.2.2 Structure of a TCP packet  . . . . . . . . . . . . . . .  6
   5. errors identifiers  . . . . . . . . . . . . . . . . . . . . . .  6
     5.1 1xx : success  . . . . . . . . . . . . . . . . . . . . . . .  6
     5.2 2xx : client error . . . . . . . . . . . . . . . . . . . . .  6
     5.3 3xx : server error . . . . . . . . . . . . . . . . . . . . .  6
     5.4 4xx : global error . . . . . . . . . . . . . . . . . . . . .  7
   6.  Commands . . . . . . . . . . . . . . . . . . . . . . . . . . .  7
       6.1.1 CONNECT  . . . . . . . . . . . . . . . . . . . . . . . .  7
       6.1.2 CREATE_ROOM  . . . . . . . . . . . . . . . . . . . . . .  7
       6.1.3 LEAVE_ROOM . . . . . . . . . . . . . . . . . . . . . . .  7
       6.1.4 JOIN_ROOM  . . . . . . . . . . . . . . . . . . . . . . .  8
       6.1.5 INVITE_PLAYER  . . . . . . . . . . . . . . . . . . . . .  8
       6.1.6 SET_GAME_PARAM . . . . . . . . . . . . . . . . . . . . .  9
       6.2.7 LAUNCH_GAME  . . . . . . . . . . . . . . . . . . . . . .  9
       6.2.8 PING . . . . . . . . . . . . . . . . . . . . . . . . . .  9
     6.2 Commands from a server to a client . . . . . . . . . . . . . 10
       6.2.1 ANSWER_CREATE_ROOM . . . . . . . . . . . . . . . . . . . 10
       6.2.2 START_DATA_STREAM  . . . . . . . . . . . . . . . . . . . 10
       6.2.3 STREAM . . . . . . . . . . . . . . . . . . . . . . . . . 10
       6.2.4 STOP_DATA_STREAM . . . . . . . . . . . . . . . . . . . . 11
       6.2.5 CLIENT_INVITED . . . . . . . . . . . . . . . . . . . . . 11
   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 11
     7.1  Normative References  . . . . . . . . . . . . . . . . . . . 11
     7.2  Informative References  . . . . . . . . . . . . . . . . . . 12
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 12
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1.  Introduction

As said before, the RTCP (R-Type Communication Protocol) protocol has been designed for creating a "Shoot Them Up" game, based on server-client (in both ways) relation.

The RTCP has been developed on systems using the TCP and UDP network protocol.

The TCP network is used when a client launches a game : every important data, (such as map, textures, etc) will be transmitted on this way, to avoid data perdition.

The UDP protocol is used for all in-game transmitted datas (like each client coordinates).

.ti 0
1.1  Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [RFC2119].


.ti 0
2. Terms definition

- Endpoint : define a couple of service, ip address and port.


.ti 0
3. Concept of RTCP protocol

The RTCP protocol is a binary one, based on only one interaction : client-server (in both ways).

.ti 0
3.1 Communication between client and server

This part has been developed to manage exchanges between servers and clients; based on TCP and UDP network protocols.
.fi
As said before, the server is the central point of every client which connects to.

The TCP network is used when a client is not playing the game (is in a waiting room, creating one), or is just launching it : every important data, (such as map, textures, etc) will be transmitted as this, to avoid data perdition.
.fi

The UDP protocol is used for all in-game transmitted datas (like each client coordinates).


Let's see the implementation of the client-server communication (TCP level).
.fi
Notice that each command's description is available below (see part 6-Commands).

.ti 8
*from Client to Server

First, each client has to CONNECT to the server.
.fi
After that, he can CREATE_ROOM, LEAVE_ROOM, JOIN_ROOM, INVITE_PLAYER, be INVITED, SET_GAME_PARAM, PING, and LAUNCH_GAME.
.fi


.ti 8
*from Server to Client

When a client emits a CONNECT, the server responds to it with ANSWER_CREATE_ROOM.
The server can also transfer information to client through START_STREAM, STREAM, STOP_STREAM commands.


.ti 0	
4. Standard packet format for data transfer

.ti 0
4.1 UDP packet format

The UDP protocol is used for communication between client and server.

.ti 0
4.1.1 Scheme of an UDP packet

+---------------+--------------------------+
.fi
| Len = 16 bits | Player's token = 16 bits |
.fi
+---------------+--------------------------+
.fi
|      Input/Output Type = 32 bits         |
.fi
+------------------------------------------+
.fi
|      Game's clock = 32 bits              |
.fi
+------------------------------------------+
.fi
|      Value of Input/Output = n bits      |
.fi
+------------------------------------------+

.ti 0
4.1.2 Structure of an UDP packet

Remember that UDP is used for in-game packet transfer.
An UDP packet is structured with 5 different fields :

.fi
- The first one ("Len") represents the total length of the packet.
.fi
- The second one ("Player's token") is an identifying number which differs for each client, in order to distinguish any of them.
.fi
- The third one ("Input / Output Type") represents the type of the packet, sent for INPUT (client to server transmission), or OUTPUT (server to client transmission).
.fi
- The fourth one ("Game's clock") contains the game's time of the packet before being sent.
.fi
- The last field ("Value of Input/Output") represents the data itself in the case of data transfer.

.ti 0
4.2 TCP packet format

The TCP protocol is used for communication server-client and server-server.

.ti 0
4.2.1 Scheme of a TCP packet

+---------------+--------------------------+
.fi
| Len = 16 bits |      Type = 16 bits      |
.fi
+---------------+--------------------------+
.fi
|            Data = n bits                 |
.fi
+------------------------------------------+

.ti 0
4.2.2 Structure of a TCP packet

Remember that TCP is used for all non in-game packet transfer.
A TCP packet is structured with 3 different field :
.fi

- The first one ("Len") represents the total length of the packet.
.fi
- The second one ("Type") contains the request or the command type.
.fi
- The last field ("Data") represents the arguments.


.ti 0
5. errors identifiers

.ti 0
5.1 1xx : success

- 101 : success

.ti 0
5.2 2xx : client error

- 201 : user refused
.fi
- 202 : user did not respond
.fi
- 203 : client failed to connect
.fi
- 204 : client understands request but refused to process it

.ti 0
5.3 3xx : server error

- 301 : server failed to transfer request
.fi
- 302 : server failed to process request
.fi
- 303 : server refused this command
.fi
- 304 : server understands request but refused to process it
.fi
- 305 : insufficient privileges
.fi
- 306 : transferred user not found

.ti 0
5.4 4xx : global error

- 401 : invalid request
.fi
- 402 : incomplete request
.fi
- 403 : forbidden request
.fi
- 404 : request not found


.ti 0
6.  Commands

6.1 Commands from a client to a server

.ti 0
6.1.1 CONNECT

Command :
.fi
CONNECT = 1201

Parameters : <username>:<password>

Description :
.fi
This command allow users to register on the network.
It is used for the creation of 'user account' on that network.

The parameters are the following:
.fi
- Username : name of the user
.fi
- Password : the password chosen by user

Notice that this command MUST be implemented.


.ti 0
6.1.2 CREATE_ROOM

Command :
.fi
CREATE_ROOM = 1202

Parameters : Nothing

Description :
.fi
This command is used by a user to create a room in the network. The room's role is to host a game.
.fi

Notice that this command MUST be implemented.


.ti 0
6.1.3 LEAVE_ROOM

Command :
.fi
LEAVE_ROOM = 1203

Parameters : <RoomId>

Description:
.fi
This command is used by a user who wants to leave a room he has created before.

The parameters are the following:
.fi
- RoomId : id of the room to join

Notice that this command MUST be implemented.


.ti 0
6.1.4 JOIN_ROOM

Command :
.fi
JOIN_ROOM = 1204

Parameters : <RoomId>

Description :
.fi
This command is used by a user who wants to join a created room.

The parameters are the following:
.fi
- RoomId : id of the room to join

Notice that this command MUST be implemented.


.ti 0
6.1.5 INVITE_PLAYER

Command :
.fi
INVITE_PLAYER = 1205

Parameters : <username>

Description:
.fi
This command is used when a user wants to invite another one in a room he has created.

The parameters are the following:
.fi
- Username : name of user to be invited

Notice that this command SHOULD be implemented.


.ti 0
6.1.6 SET_GAME_PARAM

Command :
.fi
SET_GAME_PARAM = 1206

Parameters : <key>:<value>

Description:
This command is used by a user to change in-game parameters (like players lives number for example)

The parameters are the following:
.fi
- Key : Parameter's id to be changed
.fi
- Value : New value of the parameter to change

Notice that this command SHOULD be implemented.


.ti 0
6.2.7 LAUNCH_GAME

Command :
.fi
LAUNCH_GAME = 1207

Parameters : nothing

Description:
.fi
This command is used to launch a game created.
Note that a room has to be previously created (see CREATE_ROOM command) by a user before he launches the game.

Notice that this command MUST be implemented.


.ti 0
6.2.8 PING

Command :
.fi
PING = 1208

Parameters : nothing

Description :
.fi
This command is used regularly by a client (a user) to inform the server that he is still connected.
Without telling the server he is, the server will erase the client that seems to be disconnected from his client's list.

Notice that this command MUST be implemented.


.ti 0
6.2 Commands from a server to a client

.ti 0
6.2.1 ANSWER_CREATE_ROOM

Command :
.fi
ANSWER_CREATE_ROOM = 1209

Parameters: nothing

Description:
.fi
This command is used by the server to notify the client that his CREATE_ROOM's request has been accepted, and returns him the <RoomId> he needs.
.fi

Notice that this command MUST be implemented.


.ti 0
6.2.2 START_DATA_STREAM

Command :
.fi
START_DATA_STREAM = 1210

Parameters: <fileName>

Description:
.fi
This command is used to notify a client that the server is going to transfer him the file <fileName>.
It is useful for in-game work : to transfer properly and safely files to clients, like textures.

The parameters are:
.fi
- FileName : name of the file to be transferred

Notice that this command MAY be implemented.
.fi
In case of this command is implemented, the following commands
STREAM and STOP_DATA_STREAM MUST be implemented.


.ti 0
6.2.3 STREAM

Command :
.fi
STREAM = 1211

Parameters: <fileName>

Description:
.fi
This command is used to transfer datas from a file designed by <fileName> to a client.
This command have to be called after the command START_DATA_STREAM.

The parameters are:
.fi
- FileName : name of the file to be transferred

Notice that this command MAY be implemented.
In case of this command is implemented, the following commands
START_DATA_STREAM and STOP_STREAM MUST be implemented.

.ti 0
6.2.4 STOP_DATA_STREAM

Command :
.fi
STOP_DATA_STREAM = 1212

Parameters: <fileName>

Description:
.fi
This command is used to notify a client that the server stops transferring him the file <fileName>.

The parameters are:
.fi
- FileName : name of the file on which the transfer is stopped.

Notice that this command MAY be implemented.
In case of this command is implemented, the following commands
START_DATA_STREAM and STREAM MUST be implemented.

.ti 0
6.2.5 CLIENT_INVITED

Command :
.fi
CLIENT_INVITED = 1213

Parameters: <usernameFrom>:<RoomId>

Description:
.fi
This command is used by the server to notify a client that he has been invited by another one, by a previous call to INVITE_PLAYER.
.fi

The parameters are:
.fi
- UserName : name of the user that invited the client.
- RoomId : the room's id from where the client which invited you id.

Notice that this command SHOULD be implemented.


.ti 0
7.  References

.ti 0 
7.1  Normative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 2119;KEYWORDS, 1776, RFC1925;TRUTHS
.ti 3
[KEYWORDS] Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP\014, RFC\02119, March 1997.

.ti 3
[RFC1776]  Crocker, S., "The Address is the Message", RFC\01776, April 1 1995.

.ti 3
[TRUTHS]   Callon, R., "The Twelve Networking Truths", RFC\01925, April 1 1996.

.\" \# ERF -- End of managed reference list
.\" ----------------------------------------
.\" The reference list can be changed at any time by altering the RFC list in the line below the .\" \# REF directive
.\" In order to execute any change, click on the 'Update All' button or select "Update 'Table of Contents' and References"
.\" from the "Edit" menu or press <F3>.
.\" NOTE: Managed reference list requires NroffEdit version 1.40 or later.

.ti 0
7.2  Informative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 3514;EVILBIT, 5513, 5514
.ti 3
[EVILBIT]  Bellovin, S., "The Security Flag in the IPv4 Header", RFC\03514, April 1 2003.

.ti 3
[RFC5513]  Farrel, A., "IANA Considerations for Three Letter Acronyms", RFC\05513, April 1 2009.

.ti 3
[RFC5514]  Vyncke, E., "IPv6 over Social Networks", RFC\05514, April 1 2009.

.\" \# ERF -- End of managed reference list
.in 3


.ti 0
Authors' Addresses

.sp
.nf
Nicolas MAGERE - magere_n
Quentin LEFFRAY - leffra_q

Epitech students

Email: magere_n@epitech.eu
       leffra_q@epitech.eu
.sp
.fi

