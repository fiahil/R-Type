.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.ds LF Epitech 
.ds RF FORMFEED[Page %]
.ds LH RFC 42123
.ds RH December 14, 2012
.ds CH R-Type Communication Protocol 
.ds CF Expires May 20, 2013
.hy 0
.nh
.ad l
.in 0

.nf
.tl 'RFC 42123''Nicolas MAGERE, Quentin LEFFRAY, Matthieu OSSATO-BOURGEON'
.tl 'Intended Status: Experimental''Epitech'
.tl 'Expires: May 20, 2013''December 14, 2012'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 3
RTCP: A Communication Protocol For R-Type Project
.fi
.in 3


.ti 0
Abstract

This memorandum describes RTCP, the communication protocol for a project from Epitech's school : R-Type.

This protocol is used for designing a "Shoot Them Up" game, based on server-client (in both ways) relation.

The server's aim is to interpret all incoming requests from clients to manage at both several games and all connections.

Client for its is to contact the server on the one hand to give his EP (End Point) to connect to it, and on the other hand to send regularly data to continue the game.
The following document describes server-client interactions.

.ti 0
Status of this Memo

This Internet-Draft is submitted to IETF in full conformance with the provisions of BCP\078 and BCP\079.

Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups.  Note that other groups may also distribute working documents as \%Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time.  It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at \%http://www.ietf.org/1id-abstracts.html

The list of Internet-Draft Shadow Directories can be accessed at http://www.ietf.org/shadow.html


.ti 0
Copyright and License Notice\" Boilerplate from December 2009

.\" NOTE: Insert current <year> in the following paragraph
Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.
.bp

.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1  Terminology . . . . . . . . . . . . . . . . . . . . . . . .  4
   2. Terms definition  . . . . . . . . . . . . . . . . . . . . . . .  4
   3. Concept of RTCP protocol  . . . . . . . . . . . . . . . . . . .  4
     3.1 Concept of client-server and server-client interactions  . .  4
   4. Standard packet format for data transfer  . . . . . . . . . . .  6
     4.1 Scheme of an UDP packet  . . . . . . . . . . . . . . . . . .  6
       4.1.2 Structure of an UDP packet . . . . . . . . . . . . . . .  6
     4.2 TCP packet format  . . . . . . . . . . . . . . . . . . . . .  6
       4.2.1 Scheme of a TCP packet . . . . . . . . . . . . . . . . .  7
       4.2.2 Structure of a TCP packet  . . . . . . . . . . . . . . .  7
   5. Errors identifiers  . . . . . . . . . . . . . . . . . . . . . .  7
     5.1 1xx : Success  . . . . . . . . . . . . . . . . . . . . . . .  7
     5.2 2xx : Client errors  . . . . . . . . . . . . . . . . . . . .  7
     5.3 3xx : Server errors  . . . . . . . . . . . . . . . . . . . .  7
     5.4 4xx : Global errors  . . . . . . . . . . . . . . . . . . . .  8
   6.  Commands . . . . . . . . . . . . . . . . . . . . . . . . . . .  8
     6.1 Room definition  . . . . . . . . . . . . . . . . . . . . . .  8
     6.2 Commands from a client to a server . . . . . . . . . . . . .  8
       6.2.1 CONNECT  . . . . . . . . . . . . . . . . . . . . . . . .  8
       6.2.2 CREATE_ROOM  . . . . . . . . . . . . . . . . . . . . . .  8
       6.2.3 LEAVE_ROOM . . . . . . . . . . . . . . . . . . . . . . .  9
       6.2.4 JOIN_ROOM  . . . . . . . . . . . . . . . . . . . . . . .  9
       6.2.5 INVITE_PLAYER  . . . . . . . . . . . . . . . . . . . . .  9
       6.2.6 SET_GAME_PARAM . . . . . . . . . . . . . . . . . . . . . 10
       6.2.7 LAUNCH_GAME  . . . . . . . . . . . . . . . . . . . . . . 10
       6.2.8 PING . . . . . . . . . . . . . . . . . . . . . . . . . . 10
       6.2.9 READY  . . . . . . . . . . . . . . . . . . . . . . . . . 11
     6.3 Commands from a server to a client . . . . . . . . . . . . . 11
       6.3.1 ANSWER_CREATE_ROOM . . . . . . . . . . . . . . . . . . . 11
       6.3.2 START_DATA_STREAM  . . . . . . . . . . . . . . . . . . . 11
       6.3.3 STREAM . . . . . . . . . . . . . . . . . . . . . . . . . 12
       6.3.4 STOP_DATA_STREAM . . . . . . . . . . . . . . . . . . . . 12
       6.3.5 CLIENT_INVITED . . . . . . . . . . . . . . . . . . . . . 13
       6.3.6 ACK  . . . . . . . . . . . . . . . . . . . . . . . . . . 13
       6.3.7 GAME_LAUNCHED  . . . . . . . . . . . . . . . . . . . . . 14
   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 14
     7.1  Normative References  . . . . . . . . . . . . . . . . . . . 14
     7.2  Informative References  . . . . . . . . . . . . . . . . . . 14
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 15
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1.  Introduction

The RTCP (R-Type Communication Protocol) has been designed for creating a "Shoot Them Up" game, based on server-client relation.
The game is specifically designed to host a party up to 4 players.

There is a server, which hosts all games created.
It manages all game physics and rules.

From there, several clients connects to the server to play the game.
They are used to receive data from server, and to interact with the player (input and graphics).


.ti 0
1.1  Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [RFC2119].


.ti 0
2. Terms definition

- Endpoint : defines a service, designed by his IP-address.
.fi
- Fallback mode : defines the mode of the server that owns predefined ports, on which it attempts to connect until success or no more ports are available.


.ti 0
3. Concept of RTCP protocol

The RTCP protocol has been developed on systems using the TCP and UDP network protocol.
.fi
It is a binary one, and is based on client-server interactions.

The TCP network is used for all data which are not related with the in-game itself, but all the previous important information to create it. Like this, every important data, (such as map, textures, etc) will be transmitted without data loss.
.fi

The UDP protocol is used for all in-game transmitted data (like each client coordinates).
.fi
The UDP is used for performances : it is important the data transfers quickly, because there will be many packet transfers, and the loss is negligible.


.ti 0
3.1 Concept of client-server and server-client interactions

	There is a list of commands for the client-server interaction :

Each client has to CONNECT to the server before trying any other command.
.fi
After that, he can CREATE_ROOM, JOIN_ROOM, or LEAVE_ROOM (see part 6.1 Room definition).
.fi

CREATE_ROOM tells the server the client wants to make a room to play a game.
.fi
JOIN_ROOM asks the server to enter in a room already created, to play a game with other clients.
.fi
LEAVE_ROOM tells the server the client quits a room and can no longer play with the other clients which still are in the room.
.fi

The client can also INVITE_PLAYER. He tells a second client to JOIN_ROOM the room where the first one is, by sending the INVITE_PLAYER command through the server (no client-client dialogue).
.fi
After the second client has received the command INVITED by the server, he can JOIN_ROOM or just no respond.
.fi

SET_GAME_PARAM is used by the creator of the room, to set the rules of the game before the next play.
.fi

LAUNCH_GAME is used by the creator of the room to start the game.
.fi

PING is a command sent by the client to the server, to verify the connection between them is still valid.
.fi

ACK is the success code or the error code sent to the client.
.fi


	There is a list of commands for the server-client interaction :

The server responds to a client CREATE_ROOM's command by an ANSWER_CREATE_ROOM, to give him some information about the room he created.
.fi

The server MAY upload the game data to client through:
.fi
START_STREAM, which begins the transfer process with the client.
.fi
STREAM, which represents the data being upload to the client.
.fi
STOP_STREAM, which means the end of transfer processing.







.ti 0
4. Standard packet format for data transfer

.ti 0
4.1 Scheme of an UDP packet

+---------------+--------------------------+
.fi
| Len = 16 bits | Player's token = 16 bits |
.fi
+---------------+--------------------------+
.fi
|      Input/Output Type = 32 bits         |
.fi
+------------------------------------------+
.fi
|      Game's clock = 32 bits              |
.fi
+------------------------------------------+
.fi
|      Value of Input/Output = n bits      |
.fi
+------------------------------------------+


.ti 0
4.1.2 Structure of an UDP packet

An UDP packet is structured with 5 different fields :

.fi
- Len represents the total length of the packet.
.fi
- Player's token is an identifying number which differs for each client, in order to distinguish all of them.
.fi
- Input Type / Output Type represents the type of the packet, sent for INPUT (client to server transmission), or OUTPUT (server to client transmission).

	The different types for INPUT are the following :
.fi
-> Move
.fi
-> Fire
.fi
-> Esc
.fi
-> Skill
.fi

	The different types for OUTPUT are the following :
.fi
-> Monster_Spawn
.fi
-> Monster_BSpawn
.fi
-> Monster_Die
.fi
-> Monster_BDie
.fi
-> Monster_Fire
.fi
-> Monster_BFire
.fi


.fi
- Game's clock contains the server game's clock, for the packet before being sent.
This is used to synchronize players' clocks.
.fi
- Value of Input/Output represents the data itself in the case of data transfer.


.ti 0
4.2 TCP packet format


.ti 0
4.2.1 Scheme of a TCP packet

+---------------+--------------------------+
.fi
| Len = 16 bits |      Type = 16 bits      |
.fi
+---------------+--------------------------+
.fi
|            Data = n bits                 |
.fi
+------------------------------------------+







.ti 0
4.2.2 Structure of a TCP packet

A TCP packet is structured with 3 different field :
.fi

- Len represents the total length of the packet.
.fi
- Type contains the request or command type.
.fi
- Data represents the arguments of the command.


.ti 0
5. Errors identifiers

.ti 0
5.1 1xx : Success

- 101 : Success.


.ti 0
5.2 2xx : Client errors

- 201 : User refused.
.fi
- 202 : User did not respond.
.fi
- 203 : Client failed to connect.
.fi
- 204 : Client understands request but refused to process it.


.ti 0
5.3 3xx : Server errors

- 301 : Server failed to transfer request.
.fi
- 302 : Server failed to process request.
.fi
- 303 : Server refused this command.
.fi
- 304 : Server understands request but refused to process it.
.fi
- 305 : Insufficient privileges.
.fi
- 306 : Transferred user not found.


.ti 0
5.4 4xx : Global errors

- 401 : Invalid request.
.fi
- 402 : Incomplete request.
.fi
- 403 : Forbidden request.
.fi
- 404 : Request not found.


.ti 0
6.  Commands

.ti 0
6.1 Room definition

A room is a virtual space where clients can be together in groups from 1 to 4 in order to start a game.
.fi
By default when clients connect to the server, they arrive in a special room called "Hall", a kind of waiting-area.
.fi
From there, each client can create a game, which means that they leave the "Hall" room to go to the room they created.
In case of leaving a room, each client is redirected to the "Hall" room again.


.ti 0
6.2 Commands from a client to a server

.ti 0
6.2.1 CONNECT

Command :
.fi
CONNECT = 1201

Parameters : <username>:<password>

Description :
.fi
This command allow users to register on the server.
It is used for the creation of the 'user account' on that game server.

The parameters are the following:
.fi
- Username : name of the user.
.fi
- Password : the password chosen by user.

Notice that this command MUST be implemented.


.ti 0
6.2.2 CREATE_ROOM

Command :
.fi
CREATE_ROOM = 1202

Parameters : Nothing

Description :
.fi
This command is sent by a user that wants to create a room on the server.
Notify that the client JOIN_ROOM automatically after this command.
.fi

Notice that this command MUST be implemented.


.ti 0
6.2.3 LEAVE_ROOM

Command :
.fi
LEAVE_ROOM = 1203

Parameters : <RoomId>

Description:
.fi
This command is used by a user who wants to leave a room he has created or joined before.

The parameters are the following:
.fi
- RoomId : id of the room to leave.

Notice that this command MUST be implemented.


.ti 0
6.2.4 JOIN_ROOM

Command :
.fi
JOIN_ROOM = 1204

Parameters : <RoomId>

Description :
.fi
This command is used by a user who wants to join a created room.

The parameters are the following:
.fi
- RoomId : id of the room to join

Notice that this command MUST be implemented.


.ti 0
6.2.5 INVITE_PLAYER

Command :
.fi
INVITE_PLAYER = 1205

Parameters : <username>

Description:
.fi
This command is used when a user wants to invite another one in a room he has created.

The parameters are the following:
.fi
- Username : name of user to be invited.

Notice that this command SHOULD be implemented.


.ti 0
6.2.6 SET_GAME_PARAM

Command :
.fi
SET_GAME_PARAM = 1206

Parameters : <key>:<value>

Description:
This command is used by a user to change in-game parameters (like players lives number for example)

The parameters are the following:
.fi
- Key : Parameter's id to be changed
.fi
- Value : New value of the parameter to change

Notice that this command SHOULD be implemented.


.ti 0
6.2.7 LAUNCH_GAME

Command :
.fi
LAUNCH_GAME = 1207

Parameters : nothing

Description:
.fi
This command is used to launch a game created.
Note that a room has to be previously created (see CREATE_ROOM command) by a user before he launches the game.

Notice that this command MUST be implemented.


.ti 0
6.2.8 PING

Command :
.fi
PING = 1208

Parameters : nothing

Description :
.fi
This command is used every second by a client (a user) to inform the server that he is still connected.
Without telling the server he is, the server will erase the client that seems to be disconnected after X seconds (like 10 for example) from his client's list.

Notice that this command MUST be implemented.

.ti 0
6.2.9 READY

Command :
.fi
READY = 1209

Parameters: <Endpoint>

Description:
.fi
This command is used by the client to notify the server (which has already sent him the command GAME_LAUNCHED) that he is ready for the game.
.fi

The parameters are:
.fi
- EndPoint : the Endpoint of the ready client.

Notice that this command MUST be implemented.


.ti 0
6.3 Commands from a server to a client

.ti 0
6.3.1 ANSWER_CREATE_ROOM

Command :
.fi
ANSWER_CREATE_ROOM = 1301

Parameters: <RoomId>

Description:
.fi
This command is used by the server to notify the client that his CREATE_ROOM's request has been accepted, and returns him the RoomId he needs.
.fi

Notice that this command MUST be implemented.


.ti 0
6.3.2 START_DATA_STREAM

Command :
.fi
START_DATA_STREAM = 1302

Parameters: <fileName>

Description:
.fi
This command is used to notify a client that the server is going to transfer him the file "fileName".
It is useful for out-game work : to transfer properly and safely files to clients, like downloading textures.

The parameters are:
.fi
- FileName : name of the file to be transferred

Notice that this command MAY be implemented.
.fi
In case of this command is implemented, the following commands
STREAM and STOP_DATA_STREAM MUST be implemented.


.ti 0
6.3.3 STREAM

Command :
.fi
STREAM = 1303

Parameters: <fileName>:<data>

Description:
.fi
This command is used to transfer data from a file designed by "fileName" to a client.
This command have to be called after the command START_DATA_STREAM.

The parameters are:
.fi
- FileName : name of the file to be transferred
.fi
- Data : data which are sent. Notice that data chunks must be formatted to 1024 bytes.
In case of the chunk contains less than 1024 bytes, you MUST use command STOP_DATA_STREAM instead of STREAM.

Notice that this command MAY be implemented.
In case of this command is implemented, the following commands
START_DATA_STREAM and STOP_STREAM MUST be implemented.


.ti 0
6.3.4 STOP_DATA_STREAM

Command :
.fi
STOP_DATA_STREAM = 1304

Parameters: <fileName>:<lastData>:<dataLen>:<hash>

Description:
.fi
This command is used to notify a client that the server stops transferring him the file "fileName".

The parameters are:
.fi
- FileName : name of the file on which the transfer is stopped.
.fi
- LastData : the last data available from the file to be stored.
.fi
- DataLen : Length in bytes of the "lastData".
.fi
- Hash : a MD5 hash that corresponds to "fileName".

Notice that this command MAY be implemented.
In case of this command is implemented, the following commands
START_DATA_STREAM and STREAM MUST be implemented.


.ti 0
6.3.5 CLIENT_INVITED

Command :
.fi
CLIENT_INVITED = 1305

Parameters: <usernameFrom>:<RoomId>

Description:
.fi
This command is used by the server to notify a client that he has been invited by another one, by a previous call to INVITE_PLAYER.
.fi

The parameters are:
.fi
- UserName : name of the user that invited the client.
.fi
- RoomId : the room's id from where the client which invited you id.

Notice that this command SHOULD be implemented.

.ti 0
6.3.6 ACK

Command :
.fi
ACK = 1306

Parameters: <error/successCode>

Description:
.fi
This command is used by the server to notify a client that a request has been treated with success or that an error occurred.
.fi

The parameters are:
.fi
- Error/Success Code : A code corresponding to a request sent by the client to the server.

Notice that this command MUST be implemented.


.ti 0
6.3.7 GAME_LAUNCHED

Command :
.fi
GAME_LAUNCHED = 1307

Parameters: <timestamp>:<gameclock>

Description:
.fi
This command is used by the server to notify a client that the game has been launched and it should switch to the UDP socket to get the in-game stream data.
.fi

The parameters are:
.fi
- Timestamp : Timestamp used by the server to make the the game's clock corresponds to a certain time (to avoid data loss or bad ordered packets).
.fi
- GameClock : Game's clock, MUST be initialized to 0 (the game is just beginning). 

Notice that this command MUST be implemented.


.ti 0
7.  References

.ti 0 
7.1  Normative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 2119;KEYWORDS, 1776, RFC1925;TRUTHS
.ti 3
[KEYWORDS] Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP\014, RFC\02119, March 1997.

.ti 3
[RFC1776]  Crocker, S., "The Address is the Message", RFC\01776, April 1 1995.

.ti 3
[TRUTHS]   Callon, R., "The Twelve Networking Truths", RFC\01925, April 1 1996.

.\" \# ERF -- End of managed reference list
.\" ----------------------------------------
.\" The reference list can be changed at any time by altering the RFC list in the line below the .\" \# REF directive
.\" In order to execute any change, click on the 'Update All' button or select "Update 'Table of Contents' and References"
.\" from the "Edit" menu or press <F3>.
.\" NOTE: Managed reference list requires NroffEdit version 1.40 or later.

.ti 0
7.2  Informative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 3514;EVILBIT, 5513, 5514
.ti 3
[EVILBIT]  Bellovin, S., "The Security Flag in the IPv4 Header", RFC\03514, April 1 2003.

.ti 3
[RFC5513]  Farrel, A., "IANA Considerations for Three Letter Acronyms", RFC\05513, April 1 2009.

.ti 3
[RFC5514]  Vyncke, E., "IPv6 over Social Networks", RFC\05514, April 1 2009.

.\" \# ERF -- End of managed reference list
.in 3


.ti 0
Authors' Addresses

.sp
.nf
Nicolas MAGERE - magere_n
Quentin LEFFRAY - leffra_q
Matthieu OSSATO-BOURGEON - ossato_m

Epitech students

Email:	magere_n@epitech.eu
      	leffra_q@epitech.eu
		ossato_m@epitech.eu
.sp
.fi

